{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4","program":"/home/nerun/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_channel","--edition=2018","/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=8db4645b18ca1d7e","-C","extra-filename=-8db4645b18ca1d7e","--out-dir","/home/nerun/Documents/Rust/CUIFileManager/target/rls/debug/deps","-L","dependency=/home/nerun/Documents/Rust/CUIFileManager/target/rls/debug/deps","--extern","futures_core=/home/nerun/Documents/Rust/CUIFileManager/target/rls/debug/deps/libfutures_core-5b7819758a089f66.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/nerun/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nerun/Documents/Rust/CUIFileManager/target/rls/debug/deps/libfutures_channel-8db4645b18ca1d7e.rmeta"},"prelude":{"crate_id":{"name":"futures_channel","disambiguator":[10450341624021169914,1373861672863368164]},"crate_root":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src","external_crates":[{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7620319826054890005,5717302534568989792]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","num":2,"id":{"name":"core","disambiguator":[4475606148663180750,5419346832002689975]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18209801913766412741,14708739502762596590]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17534900064032465835,11074003829314630197]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5259792513756561775,1479263106690228407]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14346116818397650781,2977216825120829807]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3936655635976934790,16389253933182331078]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5174545163365617014,15822577537272331306]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1537777832242498626,9514621648460519184]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[18358940337312830879,10081988574518201852]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[12121062121650459058,11489301800313262789]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14319052529584542008,1066639489166686923]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9012578297089494616,4116522626272880912]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8611561841149342373,8229239553347846203]}},{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","num":15,"id":{"name":"futures_core","disambiguator":[1905393756433109916,10724109288589604044]}}],"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":0,"byte_end":1450,"line_start":1,"line_end":42,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":0,"byte_end":1450,"line_start":1,"line_end":42,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":34},{"krate":0,"index":252}],"decl_id":null,"docs":" Asynchronous channels.","sig":null,"attributes":[{"value":"! Asynchronous channels.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":0,"byte_end":26,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":27,"byte_end":30,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This crate provides channels that can be used to communicate between","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":31,"byte_end":103,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"! asynchronous tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":104,"byte_end":127,"line_start":4,"line_end":4,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":128,"byte_end":131,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! All items of this library are only available when the `std` or `alloc` feature of this","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":132,"byte_end":222,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"! library is activated, and it is activated by default.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":223,"byte_end":280,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":407,"byte_end":495,"line_start":13,"line_end":13,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":663,"byte_end":684,"line_start":16,"line_end":16,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::mpsc","value":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":349},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":90},{"krate":0,"index":364},{"krate":0,"index":375},{"krate":0,"index":373},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":377},{"krate":0,"index":392},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":395},{"krate":0,"index":408},{"krate":0,"index":406},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":436},{"krate":0,"index":434},{"krate":0,"index":433},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":139},{"krate":0,"index":153},{"krate":0,"index":167},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251}],"decl_id":null,"docs":" A multi-producer, single-consumer queue for sending values across\n asynchronous tasks.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":1356,"byte_end":1379,"line_start":38,"line_end":38,"column_start":5,"column_end":28}},{"value":"! A multi-producer, single-consumer queue for sending values across","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6705997,"byte_end":6706066,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"! asynchronous tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706067,"byte_end":6706090,"line_start":2,"line_end":2,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706091,"byte_end":6706094,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! Similarly to the `std`, channel creation provides [`Receiver`] and","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706095,"byte_end":6706165,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"! [`Sender`] handles. [`Receiver`] implements [`Stream`] and allows a task to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706166,"byte_end":6706245,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"! read values out of the channel. If there is no message to read from the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706246,"byte_end":6706321,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"! channel, the current task will be notified when a new value is sent.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706322,"byte_end":6706394,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"! [`Sender`] implements the `Sink` trait and allows a task to send messages into","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706395,"byte_end":6706477,"line_start":8,"line_end":8,"column_start":1,"column_end":83}},{"value":"! the channel. If the channel is at capacity, the send will be rejected and","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706478,"byte_end":6706555,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"! the task will be notified when additional capacity is available. In other","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706556,"byte_end":6706633,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"! words, the channel provides backpressure.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706634,"byte_end":6706679,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706680,"byte_end":6706683,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Unbounded channels are also available using the `unbounded` constructor.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706684,"byte_end":6706760,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706761,"byte_end":6706764,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Disconnection","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706765,"byte_end":6706784,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706785,"byte_end":6706788,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! When all [`Sender`] handles have been dropped, it is no longer","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706789,"byte_end":6706855,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"! possible to send values into the channel. This is considered the termination","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706856,"byte_end":6706936,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"! event of the stream. As such, [`Receiver::poll_next`]","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706937,"byte_end":6706994,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"! will return `Ok(Ready(None))`.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6706995,"byte_end":6707029,"line_start":20,"line_end":20,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707030,"byte_end":6707033,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! If the [`Receiver`] handle is dropped, then messages can no longer","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707034,"byte_end":6707104,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"! be read out of the channel. In this case, all further attempts to send will","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707105,"byte_end":6707184,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"! result in an error.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707185,"byte_end":6707208,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707209,"byte_end":6707212,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! # Clean Shutdown","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707213,"byte_end":6707233,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707234,"byte_end":6707237,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! If the [`Receiver`] is simply dropped, then it is possible for","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707238,"byte_end":6707304,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"! there to be messages still in the channel that will not be processed. As","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707305,"byte_end":6707381,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"! such, it is usually desirable to perform a \"clean\" shutdown. To do this, the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707382,"byte_end":6707462,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"! receiver will first call `close`, which will prevent any further messages to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707463,"byte_end":6707543,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"! be sent into the channel. Then, the receiver consumes the channel to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707544,"byte_end":6707616,"line_start":32,"line_end":32,"column_start":1,"column_end":73}},{"value":"! completion, at which point the receiver can be dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707617,"byte_end":6707676,"line_start":33,"line_end":33,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707677,"byte_end":6707680,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! [`Sender`]: struct.Sender.html","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707681,"byte_end":6707715,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"! [`Receiver`]: struct.Receiver.html","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707716,"byte_end":6707754,"line_start":36,"line_end":36,"column_start":1,"column_end":39}},{"value":"! [`Stream`]: ../../futures_core/stream/trait.Stream.html","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707755,"byte_end":6707814,"line_start":37,"line_end":37,"column_start":1,"column_end":60}},{"value":"! [`Receiver::poll_next`]:","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707815,"byte_end":6707843,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"!     ../../futures_core/stream/trait.Stream.html#tymethod.poll_next","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6707844,"byte_end":6707914,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":338},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711286,"byte_end":6711292,"line_start":125,"line_end":125,"column_start":12,"column_end":18},"name":"Sender","qualname":"::mpsc::Sender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of a bounded mpsc channel.","sig":null,"attributes":[{"value":"/ The transmission end of a bounded mpsc channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711138,"byte_end":6711189,"line_start":121,"line_end":121,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711190,"byte_end":6711193,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`channel`](channel) function.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711194,"byte_end":6711257,"line_start":123,"line_end":123,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":345},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711484,"byte_end":6711499,"line_start":131,"line_end":131,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::mpsc::UnboundedSender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The transmission end of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The transmission end of an unbounded mpsc channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711329,"byte_end":6711383,"line_start":127,"line_end":127,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711384,"byte_end":6711387,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`](unbounded) function.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711388,"byte_end":6711455,"line_start":129,"line_end":129,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":352},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711771,"byte_end":6711779,"line_start":140,"line_end":140,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::mpsc::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":354}],"decl_id":null,"docs":" The receiving end of a bounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiving end of a bounded mpsc channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711626,"byte_end":6711674,"line_start":136,"line_end":136,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711675,"byte_end":6711678,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`channel`](channel) function.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711679,"byte_end":6711742,"line_start":138,"line_end":138,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":358},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711981,"byte_end":6711998,"line_start":148,"line_end":148,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::mpsc::UnboundedReceiver","value":"UnboundedReceiver {  }","parent":null,"children":[{"krate":0,"index":360}],"decl_id":null,"docs":" The receiving end of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiving end of an unbounded mpsc channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711829,"byte_end":6711880,"line_start":144,"line_end":144,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711881,"byte_end":6711884,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`](unbounded) function.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711885,"byte_end":6711952,"line_start":146,"line_end":146,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":364},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712275,"byte_end":6712284,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"SendError","qualname":"::mpsc::SendError","value":"SendError {  }","parent":null,"children":[{"krate":0,"index":365}],"decl_id":null,"docs":" The error type for [`Sender`s](Sender) used as `Sink`s.\n","sig":null,"attributes":[{"value":"/ The error type for [`Sender`s](Sender) used as `Sink`s.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712165,"byte_end":6712224,"line_start":155,"line_end":155,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712423,"byte_end":6712435,"line_start":163,"line_end":163,"column_start":12,"column_end":24},"name":"TrySendError","qualname":"::mpsc::TrySendError","value":"TrySendError {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380}],"decl_id":null,"docs":" The error type returned from [`try_send`](Sender::try_send).\n","sig":null,"attributes":[{"value":"/ The error type returned from [`try_send`](Sender::try_send).","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712315,"byte_end":6712379,"line_start":161,"line_end":161,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712645,"byte_end":6712657,"line_start":175,"line_end":175,"column_start":12,"column_end":24},"name":"TryRecvError","qualname":"::mpsc::TryRecvError","value":"TryRecvError {  }","parent":null,"children":[{"krate":0,"index":93}],"decl_id":null,"docs":" The error type returned from [`try_next`](Receiver::try_next).\n","sig":null,"attributes":[{"value":"/ The error type returned from [`try_next`](Receiver::try_next).","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712567,"byte_end":6712633,"line_start":174,"line_end":174,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713105,"byte_end":6713112,"line_start":193,"line_end":193,"column_start":12,"column_end":19},"name":"is_full","qualname":"<SendError>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the channel being full.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the channel being full.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713024,"byte_end":6713093,"line_start":192,"line_end":192,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713327,"byte_end":6713342,"line_start":201,"line_end":201,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<SendError>::is_disconnected","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the receiver being dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the receiver being dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713242,"byte_end":6713315,"line_start":200,"line_end":200,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714165,"byte_end":6714172,"line_start":231,"line_end":231,"column_start":12,"column_end":19},"name":"is_full","qualname":"<TrySendError<T>>::is_full","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the channel being full.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the channel being full.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714084,"byte_end":6714153,"line_start":230,"line_end":230,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714313,"byte_end":6714328,"line_start":236,"line_end":236,"column_start":12,"column_end":27},"name":"is_disconnected","qualname":"<TrySendError<T>>::is_disconnected","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error is a result of the receiver being dropped.\n","sig":null,"attributes":[{"value":"/ Returns true if this error is a result of the receiver being dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714228,"byte_end":6714301,"line_start":235,"line_end":235,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714469,"byte_end":6714479,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<TrySendError<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the message that was attempted to be sent but failed.\n","sig":null,"attributes":[{"value":"/ Returns the message that was attempted to be sent but failed.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714392,"byte_end":6714457,"line_start":240,"line_end":240,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714587,"byte_end":6714602,"line_start":246,"line_end":246,"column_start":12,"column_end":27},"name":"into_send_error","qualname":"<TrySendError<T>>::into_send_error","value":"fn (self) -> SendError","parent":null,"children":[],"decl_id":null,"docs":" Drops the message and converts into a `SendError`.\n","sig":null,"attributes":[{"value":"/ Drops the message and converts into a `SendError`.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714521,"byte_end":6714575,"line_start":245,"line_end":245,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6718013,"byte_end":6718020,"line_start":363,"line_end":363,"column_start":8,"column_end":15},"name":"channel","qualname":"::mpsc::channel","value":"fn <T> (buffer: usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a bounded mpsc channel for communicating between asynchronous tasks.","sig":null,"attributes":[{"value":"/ Creates a bounded mpsc channel for communicating between asynchronous tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717387,"byte_end":6717467,"line_start":352,"line_end":352,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717468,"byte_end":6717471,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ Being bounded, this channel provides backpressure to ensure that the sender","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717472,"byte_end":6717551,"line_start":354,"line_end":354,"column_start":1,"column_end":80}},{"value":"/ outpaces the receiver by only a limited amount. The channel's capacity is","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717552,"byte_end":6717629,"line_start":355,"line_end":355,"column_start":1,"column_end":78}},{"value":"/ equal to `buffer + num-senders`. In other words, each sender gets a","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717630,"byte_end":6717701,"line_start":356,"line_end":356,"column_start":1,"column_end":72}},{"value":"/ guaranteed slot in the channel capacity, and on top of that there are","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717702,"byte_end":6717775,"line_start":357,"line_end":357,"column_start":1,"column_end":74}},{"value":"/ `buffer` \"first come, first serve\" slots available to all senders.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717776,"byte_end":6717846,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717847,"byte_end":6717850,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ The [`Receiver`](Receiver) returned implements the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717851,"byte_end":6717905,"line_start":360,"line_end":360,"column_start":1,"column_end":55}},{"value":"/ [`Stream`](futures_core::stream::Stream) trait, while [`Sender`](Sender) implements","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717906,"byte_end":6717993,"line_start":361,"line_end":361,"column_start":1,"column_end":88}},{"value":"/ `Sink`.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717994,"byte_end":6718005,"line_start":362,"line_end":362,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719284,"byte_end":6719293,"line_start":400,"line_end":400,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::mpsc::unbounded","value":"fn <T> () -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an unbounded mpsc channel for communicating between asynchronous\n tasks.","sig":null,"attributes":[{"value":"/ Creates an unbounded mpsc channel for communicating between asynchronous","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6718772,"byte_end":6718848,"line_start":390,"line_end":390,"column_start":1,"column_end":77}},{"value":"/ tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6718849,"byte_end":6718859,"line_start":391,"line_end":391,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6718860,"byte_end":6718863,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ A `send` on this channel will always succeed as long as the receive half has","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6718864,"byte_end":6718944,"line_start":393,"line_end":393,"column_start":1,"column_end":81}},{"value":"/ not been closed. If the receiver falls behind, messages will be arbitrarily","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6718945,"byte_end":6719024,"line_start":394,"line_end":394,"column_start":1,"column_end":80}},{"value":"/ buffered.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719025,"byte_end":6719038,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719039,"byte_end":6719042,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ **Note** that the amount of available system memory is an implicit bound to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719043,"byte_end":6719122,"line_start":397,"line_end":397,"column_start":1,"column_end":80}},{"value":"/ the channel. Using an `unbounded` channel has the ability of causing the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719123,"byte_end":6719199,"line_start":398,"line_end":398,"column_start":1,"column_end":77}},{"value":"/ process to run out of memory. In this case, the process will be aborted.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719200,"byte_end":6719276,"line_start":399,"line_end":399,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6729703,"byte_end":6729711,"line_start":712,"line_end":712,"column_start":12,"column_end":20},"name":"try_send","qualname":"<Sender<T>>::try_send","value":"fn (&mut self, msg: T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to send a message on this `Sender`, returning the message\n if there was an error.\n","sig":null,"attributes":[{"value":"/ Attempts to send a message on this `Sender`, returning the message","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6729590,"byte_end":6729660,"line_start":710,"line_end":710,"column_start":5,"column_end":75}},{"value":"/ if there was an error.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6729665,"byte_end":6729691,"line_start":711,"line_end":711,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730272,"byte_end":6730282,"line_start":730,"line_end":730,"column_start":12,"column_end":22},"name":"start_send","qualname":"<Sender<T>>::start_send","value":"fn (&mut self, msg: T) -> Result<(), SendError>","parent":null,"children":[],"decl_id":null,"docs":" Send a message on the channel.","sig":null,"attributes":[{"value":"/ Send a message on the channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730056,"byte_end":6730090,"line_start":725,"line_end":725,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730095,"byte_end":6730098,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ This function should only be called after","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730103,"byte_end":6730148,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/ [`poll_ready`](Sender::poll_ready) has reported that the channel is","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730153,"byte_end":6730224,"line_start":728,"line_end":728,"column_start":5,"column_end":76}},{"value":"/ ready to receive a message.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730229,"byte_end":6730260,"line_start":729,"line_end":729,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730910,"byte_end":6730920,"line_start":747,"line_end":747,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<Sender<T>>::poll_ready","value":"fn (&mut self, cx: &mut Context<'_>) -> Poll<Result<(), SendError>>","parent":null,"children":[],"decl_id":null,"docs":" Polls the channel to determine if there is guaranteed capacity to send\n at least one item without waiting.","sig":null,"attributes":[{"value":"/ Polls the channel to determine if there is guaranteed capacity to send","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730399,"byte_end":6730473,"line_start":735,"line_end":735,"column_start":5,"column_end":79}},{"value":"/ at least one item without waiting.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730478,"byte_end":6730516,"line_start":736,"line_end":736,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730521,"byte_end":6730524,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730529,"byte_end":6730547,"line_start":738,"line_end":738,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730552,"byte_end":6730555,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ This method returns:","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730560,"byte_end":6730584,"line_start":740,"line_end":740,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730589,"byte_end":6730592,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Ok(_))` if there is sufficient capacity;","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730597,"byte_end":6730656,"line_start":742,"line_end":742,"column_start":5,"column_end":64}},{"value":"/ - `Poll::Pending` if the channel may not have","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730661,"byte_end":6730710,"line_start":743,"line_end":743,"column_start":5,"column_end":54}},{"value":"/   capacity, in which case the current task is queued to be notified once","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730715,"byte_end":6730791,"line_start":744,"line_end":744,"column_start":5,"column_end":81}},{"value":"/   capacity is available;","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730796,"byte_end":6730824,"line_start":745,"line_end":745,"column_start":5,"column_end":33}},{"value":"/ - `Poll::Ready(Err(SendError))` if the receiver has been dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6730829,"byte_end":6730898,"line_start":746,"line_end":746,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731245,"byte_end":6731254,"line_start":758,"line_end":758,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<Sender<T>>::is_closed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[{"value":"/ Returns whether this channel is closed without needing a context.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731164,"byte_end":6731233,"line_start":757,"line_end":757,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731444,"byte_end":6731457,"line_start":763,"line_end":763,"column_start":12,"column_end":25},"name":"close_channel","qualname":"<Sender<T>>::close_channel","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes this channel from the sender side, preventing any new messages.\n","sig":null,"attributes":[{"value":"/ Closes this channel from the sender side, preventing any new messages.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731358,"byte_end":6731432,"line_start":762,"line_end":762,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731673,"byte_end":6731683,"line_start":770,"line_end":770,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<Sender<T>>::disconnect","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disconnects this sender from the channel, closing it if there are no more senders left.\n","sig":null,"attributes":[{"value":"/ Disconnects this sender from the channel, closing it if there are no more senders left.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731570,"byte_end":6731661,"line_start":769,"line_end":769,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731801,"byte_end":6731814,"line_start":775,"line_end":775,"column_start":12,"column_end":25},"name":"same_receiver","qualname":"<Sender<T>>::same_receiver","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the senders send to the same receiver.\n","sig":null,"attributes":[{"value":"/ Returns whether the senders send to the same receiver.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731731,"byte_end":6731789,"line_start":774,"line_end":774,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732057,"byte_end":6732070,"line_start":783,"line_end":783,"column_start":12,"column_end":25},"name":"hash_receiver","qualname":"<Sender<T>>::hash_receiver","value":"fn <H> (&self, hasher: &mut H) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Hashes the receiver into the provided hasher\n","sig":null,"attributes":[{"value":"/ Hashes the receiver into the provided hasher","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6731997,"byte_end":6732045,"line_start":782,"line_end":782,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732351,"byte_end":6732361,"line_start":793,"line_end":793,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<UnboundedSender<T>>::poll_ready","value":"fn (&self, _: &mut Context<'_>) -> Poll<Result<(), SendError>>","parent":null,"children":[],"decl_id":null,"docs":" Check if the channel is ready to receive a message.\n","sig":null,"attributes":[{"value":"/ Check if the channel is ready to receive a message.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732284,"byte_end":6732339,"line_start":792,"line_end":792,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732682,"byte_end":6732691,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"is_closed","qualname":"<UnboundedSender<T>>::is_closed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this channel is closed without needing a context.\n","sig":null,"attributes":[{"value":"/ Returns whether this channel is closed without needing a context.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732601,"byte_end":6732670,"line_start":803,"line_end":803,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732883,"byte_end":6732896,"line_start":809,"line_end":809,"column_start":12,"column_end":25},"name":"close_channel","qualname":"<UnboundedSender<T>>::close_channel","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes this channel from the sender side, preventing any new messages.\n","sig":null,"attributes":[{"value":"/ Closes this channel from the sender side, preventing any new messages.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732797,"byte_end":6732871,"line_start":808,"line_end":808,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733104,"byte_end":6733114,"line_start":816,"line_end":816,"column_start":12,"column_end":22},"name":"disconnect","qualname":"<UnboundedSender<T>>::disconnect","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disconnects this sender from the channel, closing it if there are no more senders left.\n","sig":null,"attributes":[{"value":"/ Disconnects this sender from the channel, closing it if there are no more senders left.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733001,"byte_end":6733092,"line_start":815,"line_end":815,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733831,"byte_end":6733841,"line_start":841,"line_end":841,"column_start":12,"column_end":22},"name":"start_send","qualname":"<UnboundedSender<T>>::start_send","value":"fn (&mut self, msg: T) -> Result<(), SendError>","parent":null,"children":[],"decl_id":null,"docs":" Send a message on the channel.","sig":null,"attributes":[{"value":"/ Send a message on the channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733636,"byte_end":6733670,"line_start":837,"line_end":837,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733675,"byte_end":6733678,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ This method should only be called after `poll_ready` has been used to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733683,"byte_end":6733756,"line_start":839,"line_end":839,"column_start":5,"column_end":78}},{"value":"/ verify that the channel is ready to receive a message.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733761,"byte_end":6733819,"line_start":840,"line_end":840,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734206,"byte_end":6734220,"line_start":851,"line_end":851,"column_start":12,"column_end":26},"name":"unbounded_send","qualname":"<UnboundedSender<T>>::unbounded_send","value":"fn (&self, msg: T) -> Result<(), TrySendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends a message along this channel.","sig":null,"attributes":[{"value":"/ Sends a message along this channel.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6733960,"byte_end":6733999,"line_start":846,"line_end":846,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734004,"byte_end":6734007,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ This is an unbounded sender, so this function differs from `Sink::send`","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734012,"byte_end":6734087,"line_start":848,"line_end":848,"column_start":5,"column_end":80}},{"value":"/ by ensuring the return type reflects that the channel is always ready to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734092,"byte_end":6734168,"line_start":849,"line_end":849,"column_start":5,"column_end":81}},{"value":"/ receive messages.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734173,"byte_end":6734194,"line_start":850,"line_end":850,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734379,"byte_end":6734392,"line_start":856,"line_end":856,"column_start":12,"column_end":25},"name":"same_receiver","qualname":"<UnboundedSender<T>>::same_receiver","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the senders send to the same receiver.\n","sig":null,"attributes":[{"value":"/ Returns whether the senders send to the same receiver.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734309,"byte_end":6734367,"line_start":855,"line_end":855,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734635,"byte_end":6734648,"line_start":864,"line_end":864,"column_start":12,"column_end":25},"name":"hash_receiver","qualname":"<UnboundedSender<T>>::hash_receiver","value":"fn <H> (&self, hasher: &mut H) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Hashes the receiver into the provided hasher\n","sig":null,"attributes":[{"value":"/ Hashes the receiver into the provided hasher","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734575,"byte_end":6734623,"line_start":863,"line_end":863,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738229,"byte_end":6738234,"line_start":981,"line_end":981,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737992,"byte_end":6738056,"line_start":977,"line_end":977,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738061,"byte_end":6738064,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738069,"byte_end":6738144,"line_start":979,"line_end":979,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738149,"byte_end":6738217,"line_start":980,"line_end":980,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6739015,"byte_end":6739023,"line_start":1001,"line_end":1001,"column_start":12,"column_end":20},"name":"try_next","qualname":"<Receiver<T>>::try_next","value":"fn (&mut self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to receive the next message without notifying a context if empty.","sig":null,"attributes":[{"value":"/ Tries to receive the next message without notifying a context if empty.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738629,"byte_end":6738704,"line_start":993,"line_end":993,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738709,"byte_end":6738712,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ It is not recommended to call this function from inside of a future,","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738717,"byte_end":6738789,"line_start":995,"line_end":995,"column_start":5,"column_end":77}},{"value":"/ only when you've otherwise arranged to be notified when the channel is","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738794,"byte_end":6738868,"line_start":996,"line_end":996,"column_start":5,"column_end":79}},{"value":"/ no longer empty.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738873,"byte_end":6738893,"line_start":997,"line_end":997,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738898,"byte_end":6738901,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called after `try_next` or `poll_next` has","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738906,"byte_end":6738980,"line_start":999,"line_end":999,"column_start":5,"column_end":79}},{"value":"/ returned None.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6738985,"byte_end":6739003,"line_start":1000,"line_end":1000,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743056,"byte_end":6743061,"line_start":1117,"line_end":1117,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiving half of a channel, without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiving half of a channel, without dropping it.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742819,"byte_end":6742883,"line_start":1113,"line_end":1113,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742888,"byte_end":6742891,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742896,"byte_end":6742971,"line_start":1115,"line_end":1115,"column_start":5,"column_end":80}},{"value":"/ still enabling the receiver to drain messages that are buffered.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742976,"byte_end":6743044,"line_start":1116,"line_end":1116,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743561,"byte_end":6743569,"line_start":1131,"line_end":1131,"column_start":12,"column_end":20},"name":"try_next","qualname":"<UnboundedReceiver<T>>::try_next","value":"fn (&mut self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to receive the next message without notifying a context if empty.","sig":null,"attributes":[{"value":"/ Tries to receive the next message without notifying a context if empty.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743175,"byte_end":6743250,"line_start":1123,"line_end":1123,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743255,"byte_end":6743258,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ It is not recommended to call this function from inside of a future,","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743263,"byte_end":6743335,"line_start":1125,"line_end":1125,"column_start":5,"column_end":77}},{"value":"/ only when you've otherwise arranged to be notified when the channel is","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743340,"byte_end":6743414,"line_start":1126,"line_end":1126,"column_start":5,"column_end":79}},{"value":"/ no longer empty.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743419,"byte_end":6743439,"line_start":1127,"line_end":1127,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743444,"byte_end":6743447,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called after `try_next` or `poll_next` has","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743452,"byte_end":6743526,"line_start":1129,"line_end":1129,"column_start":5,"column_end":79}},{"value":"/ returned None.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6743531,"byte_end":6743549,"line_start":1130,"line_end":1130,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":252},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::oneshot","value":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":455},{"krate":0,"index":461},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":281},{"krate":0,"index":286},{"krate":0,"index":464},{"krate":0,"index":475},{"krate":0,"index":474},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":466},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":296},{"krate":0,"index":300}],"decl_id":null,"docs":" A channel for sending a single message between asynchronous tasks.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":1402,"byte_end":1427,"line_start":40,"line_end":40,"column_start":5,"column_end":30}},{"value":"! A channel for sending a single message between asynchronous tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6754959,"byte_end":6755029,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":443},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755499,"byte_end":6755507,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":445}],"decl_id":null,"docs":" A future for a value that will be provided by another asynchronous task.","sig":null,"attributes":[{"value":"/ A future for a value that will be provided by another asynchronous task.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755273,"byte_end":6755349,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755350,"byte_end":6755353,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`channel`] function.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755354,"byte_end":6755402,"line_start":15,"line_end":15,"column_start":1,"column_end":49}},{"value":"must_use = \"futures do nothing unless you `.await` or poll them\"","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755403,"byte_end":6755470,"line_start":16,"line_end":16,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":449},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755683,"byte_end":6755689,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Sender","qualname":"::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":451}],"decl_id":null,"docs":" A means of transmitting a single value to another task.","sig":null,"attributes":[{"value":"/ A means of transmitting a single value to another task.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755542,"byte_end":6755601,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755602,"byte_end":6755605,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`channel`] function.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755606,"byte_end":6755654,"line_start":24,"line_end":24,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":268},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758570,"byte_end":6758577,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"channel","qualname":"::oneshot::channel","value":"fn <T> () -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a new one-shot channel for sending values across asynchronous tasks.","sig":null,"attributes":[{"value":"/ Creates a new one-shot channel for sending values across asynchronous tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757594,"byte_end":6757674,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757675,"byte_end":6757678,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This function is similar to Rust's channel constructor found in the standard","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757679,"byte_end":6757759,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/ library. Two halves are returned, the first of which is a `Sender` handle,","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757760,"byte_end":6757838,"line_start":74,"line_end":74,"column_start":1,"column_end":79}},{"value":"/ used to signal the end of a computation and provide its value. The second","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757839,"byte_end":6757916,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ half is a `Receiver` which implements the `Future` trait, resolving to the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757917,"byte_end":6757995,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ value that was given to the `Sender` handle.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6757996,"byte_end":6758044,"line_start":77,"line_end":77,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758045,"byte_end":6758048,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Each half can be separately owned and sent across tasks.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758049,"byte_end":6758109,"line_start":79,"line_end":79,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758110,"byte_end":6758113,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758114,"byte_end":6758128,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758129,"byte_end":6758132,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758133,"byte_end":6758140,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use futures::channel::oneshot;","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758141,"byte_end":6758175,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/ use futures::future::FutureExt;","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758176,"byte_end":6758211,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/ use std::thread;","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758212,"byte_end":6758232,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758233,"byte_end":6758236,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let (sender, receiver) = oneshot::channel::<i32>();","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758237,"byte_end":6758292,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758293,"byte_end":6758296,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # let t =","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758297,"byte_end":6758310,"line_start":90,"line_end":90,"column_start":1,"column_end":14}},{"value":"/ thread::spawn(|| {","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758311,"byte_end":6758333,"line_start":91,"line_end":91,"column_start":1,"column_end":23}},{"value":"/     let future = receiver.map(|i| {","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758334,"byte_end":6758373,"line_start":92,"line_end":92,"column_start":1,"column_end":40}},{"value":"/         println!(\"got: {:?}\", i);","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758374,"byte_end":6758411,"line_start":93,"line_end":93,"column_start":1,"column_end":38}},{"value":"/     });","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758412,"byte_end":6758423,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/     // ...","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758424,"byte_end":6758438,"line_start":95,"line_end":95,"column_start":1,"column_end":15}},{"value":"/ # return future;","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758439,"byte_end":6758459,"line_start":96,"line_end":96,"column_start":1,"column_end":21}},{"value":"/ });","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758460,"byte_end":6758467,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758468,"byte_end":6758471,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ sender.send(3).unwrap();","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758472,"byte_end":6758500,"line_start":99,"line_end":99,"column_start":1,"column_end":29}},{"value":"/ # futures::executor::block_on(t.join().unwrap());","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758501,"byte_end":6758554,"line_start":100,"line_end":100,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758555,"byte_end":6758562,"line_start":101,"line_end":101,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767872,"byte_end":6767876,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"fn (self, t: T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Completes this oneshot with a successful result.","sig":null,"attributes":[{"value":"/ Completes this oneshot with a successful result.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767350,"byte_end":6767402,"line_start":331,"line_end":331,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767407,"byte_end":6767410,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This function will consume `self` and indicate to the other end, the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767415,"byte_end":6767487,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ [`Receiver`](Receiver), that the value provided is the result of the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767492,"byte_end":6767564,"line_start":334,"line_end":334,"column_start":5,"column_end":77}},{"value":"/ computation this represents.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767569,"byte_end":6767601,"line_start":335,"line_end":335,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767606,"byte_end":6767609,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ If the value is successfully enqueued for the remote end to receive,","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767614,"byte_end":6767686,"line_start":337,"line_end":337,"column_start":5,"column_end":77}},{"value":"/ then `Ok(())` is returned. If the receiving end was dropped before","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767691,"byte_end":6767761,"line_start":338,"line_end":338,"column_start":5,"column_end":75}},{"value":"/ this function was called, however, then `Err` is returned with the value","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767766,"byte_end":6767842,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ provided.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767847,"byte_end":6767860,"line_start":340,"line_end":340,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768533,"byte_end":6768546,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"poll_canceled","qualname":"<Sender<T>>::poll_canceled","value":"fn (&mut self, cx: &mut Context<'_>) -> Poll<()>","parent":null,"children":[],"decl_id":null,"docs":" Polls this `Sender` half to detect whether its associated\n [`Receiver`](Receiver) with has been dropped.","sig":null,"attributes":[{"value":"/ Polls this `Sender` half to detect whether its associated","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767946,"byte_end":6768007,"line_start":345,"line_end":345,"column_start":5,"column_end":66}},{"value":"/ [`Receiver`](Receiver) with has been dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768012,"byte_end":6768061,"line_start":346,"line_end":346,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768066,"byte_end":6768069,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Return values","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768074,"byte_end":6768093,"line_start":348,"line_end":348,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768098,"byte_end":6768101,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ If `Ready(())` is returned then the associated `Receiver` has been","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768106,"byte_end":6768176,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ dropped, which means any work required for sending should be canceled.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768181,"byte_end":6768255,"line_start":351,"line_end":351,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768260,"byte_end":6768263,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ If `Pending` is returned then the associated `Receiver` is still","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768268,"byte_end":6768336,"line_start":353,"line_end":353,"column_start":5,"column_end":73}},{"value":"/ alive and may be able to receive a message if sent. The current task,","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768341,"byte_end":6768414,"line_start":354,"line_end":354,"column_start":5,"column_end":78}},{"value":"/ however, is scheduled to receive a notification if the corresponding","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768419,"byte_end":6768491,"line_start":355,"line_end":355,"column_start":5,"column_end":77}},{"value":"/ `Receiver` goes away.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768496,"byte_end":6768521,"line_start":356,"line_end":356,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768981,"byte_end":6768992,"line_start":367,"line_end":367,"column_start":12,"column_end":23},"name":"is_canceled","qualname":"<Sender<T>>::is_canceled","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests to see whether this `Sender`'s corresponding `Receiver`\n has been dropped.","sig":null,"attributes":[{"value":"/ Tests to see whether this `Sender`'s corresponding `Receiver`","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768642,"byte_end":6768707,"line_start":361,"line_end":361,"column_start":5,"column_end":70}},{"value":"/ has been dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768712,"byte_end":6768733,"line_start":362,"line_end":362,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768738,"byte_end":6768741,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Unlike [`poll_canceled`](Sender::poll_canceled), this function does not","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768746,"byte_end":6768821,"line_start":364,"line_end":364,"column_start":5,"column_end":80}},{"value":"/ enqueue a task for wakeup upon cancellation, but merely reports the","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768826,"byte_end":6768897,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/ current state, which may be subject to concurrent modification.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6768902,"byte_end":6768969,"line_start":366,"line_end":366,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":464},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769307,"byte_end":6769315,"line_start":381,"line_end":381,"column_start":12,"column_end":20},"name":"Canceled","qualname":"::oneshot::Canceled","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from a [`Receiver`](Receiver) when the corresponding\n [`Sender`](Sender) is dropped.\n","sig":null,"attributes":[{"value":"/ Error returned from a [`Receiver`](Receiver) when the corresponding","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769144,"byte_end":6769215,"line_start":378,"line_end":378,"column_start":1,"column_end":72}},{"value":"/ [`Sender`](Sender) is dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769216,"byte_end":6769250,"line_start":379,"line_end":379,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769923,"byte_end":6769928,"line_start":400,"line_end":400,"column_start":12,"column_end":17},"name":"close","qualname":"<Receiver<T>>::close","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Gracefully close this receiver, preventing any subsequent attempts to\n send to it.","sig":null,"attributes":[{"value":"/ Gracefully close this receiver, preventing any subsequent attempts to","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769551,"byte_end":6769624,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ send to it.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769629,"byte_end":6769644,"line_start":394,"line_end":394,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769649,"byte_end":6769652,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ Any `send` operation which happens after this method returns is","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769657,"byte_end":6769724,"line_start":396,"line_end":396,"column_start":5,"column_end":72}},{"value":"/ guaranteed to fail. After calling this method, you can use","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769729,"byte_end":6769791,"line_start":397,"line_end":397,"column_start":5,"column_end":67}},{"value":"/ [`Receiver::poll`](core::future::Future::poll) to determine whether a","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769796,"byte_end":6769869,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ message had previously been sent.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769874,"byte_end":6769911,"line_start":399,"line_end":399,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770359,"byte_end":6770367,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"try_recv","qualname":"<Receiver<T>>::try_recv","value":"fn (&mut self) -> Result<Option<T>, Canceled>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to receive a message outside of the context of a task.","sig":null,"attributes":[{"value":"/ Attempts to receive a message outside of the context of a task.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769983,"byte_end":6770050,"line_start":404,"line_end":404,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770055,"byte_end":6770058,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ Does not schedule a task wakeup or have any other side effects.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770063,"byte_end":6770130,"line_start":406,"line_end":406,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770135,"byte_end":6770138,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ A return value of `None` must be considered immediately stale (out of","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770143,"byte_end":6770216,"line_start":408,"line_end":408,"column_start":5,"column_end":78}},{"value":"/ date) unless [`close`](Receiver::close) has been called first.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770221,"byte_end":6770287,"line_start":409,"line_end":409,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770292,"byte_end":6770295,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the sender was dropped.","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770300,"byte_end":6770347,"line_start":411,"line_end":411,"column_start":5,"column_end":52}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704005,"byte_end":6704009,"line_start":34,"line_end":34,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704046,"byte_end":6704050,"line_start":35,"line_end":35,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704066,"byte_end":6704070,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704911,"byte_end":6704918,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6705171,"byte_end":6705178,"line_start":73,"line_end":73,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6705541,"byte_end":6705548,"line_start":84,"line_end":84,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751488,"byte_end":6751493,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751531,"byte_end":6751536,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751553,"byte_end":6751557,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751753,"byte_end":6751758,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6754660,"byte_end":6754665,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711067,"byte_end":6711087,"line_start":118,"line_end":118,"column_start":19,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711112,"byte_end":6711130,"line_start":119,"line_end":119,"column_start":19,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711601,"byte_end":6711616,"line_start":134,"line_end":134,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712140,"byte_end":6712157,"line_start":153,"line_end":153,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712700,"byte_end":6712709,"line_start":179,"line_end":179,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712989,"byte_end":6712998,"line_start":189,"line_end":189,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713008,"byte_end":6713017,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713501,"byte_end":6713513,"line_start":209,"line_end":209,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713720,"byte_end":6713732,"line_start":217,"line_end":217,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714034,"byte_end":6714046,"line_start":227,"line_end":227,"column_start":47,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714062,"byte_end":6714074,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714670,"byte_end":6714682,"line_start":251,"line_end":251,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714839,"byte_end":6714851,"line_start":258,"line_end":258,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6715000,"byte_end":6715012,"line_start":264,"line_end":264,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717108,"byte_end":6717118,"line_start":335,"line_end":335,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719793,"byte_end":6719813,"line_start":426,"line_end":426,"column_start":9,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6722494,"byte_end":6722512,"line_start":507,"line_end":507,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6729574,"byte_end":6729580,"line_start":709,"line_end":709,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732259,"byte_end":6732274,"line_start":791,"line_end":791,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734847,"byte_end":6734853,"line_start":872,"line_end":872,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734952,"byte_end":6734967,"line_start":878,"line_end":878,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6735084,"byte_end":6735104,"line_start":884,"line_end":884,"column_start":19,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6736180,"byte_end":6736198,"line_start":915,"line_end":915,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737412,"byte_end":6737432,"line_start":948,"line_end":948,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737677,"byte_end":6737695,"line_start":959,"line_end":959,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737974,"byte_end":6737982,"line_start":976,"line_end":976,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6741475,"byte_end":6741483,"line_start":1065,"line_end":1065,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6741515,"byte_end":6741523,"line_start":1067,"line_end":1067,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6741624,"byte_end":6741632,"line_start":1073,"line_end":1073,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742512,"byte_end":6742520,"line_start":1100,"line_end":1100,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742792,"byte_end":6742809,"line_start":1112,"line_end":1112,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6745506,"byte_end":6745523,"line_start":1181,"line_end":1181,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6745624,"byte_end":6745641,"line_start":1187,"line_end":1187,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6746517,"byte_end":6746534,"line_start":1214,"line_end":1214,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6746846,"byte_end":6746860,"line_start":1232,"line_end":1232,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747143,"byte_end":6747155,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747681,"byte_end":6747695,"line_start":1262,"line_end":1262,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747732,"byte_end":6747746,"line_start":1263,"line_end":1263,"column_start":31,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747784,"byte_end":6747796,"line_start":1265,"line_end":1265,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747833,"byte_end":6747845,"line_start":1266,"line_end":1266,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755797,"byte_end":6755805,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755830,"byte_end":6755836,"line_start":32,"line_end":32,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758802,"byte_end":6758807,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767334,"byte_end":6767340,"line_start":330,"line_end":330,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769069,"byte_end":6769075,"line_start":372,"line_end":372,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769340,"byte_end":6769348,"line_start":383,"line_end":383,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769512,"byte_end":6769520,"line_start":390,"line_end":390,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769533,"byte_end":6769541,"line_start":392,"line_end":392,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770470,"byte_end":6770478,"line_start":417,"line_end":417,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770688,"byte_end":6770696,"line_start":428,"line_end":428,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":1392,"byte_end":1396,"line_start":39,"line_end":39,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lib.rs","byte_start":1440,"byte_end":1447,"line_start":41,"line_end":41,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":252}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704005,"byte_end":6704009,"line_start":34,"line_end":34,"column_start":31,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":303},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704046,"byte_end":6704050,"line_start":35,"line_end":35,"column_start":31,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":303},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704066,"byte_end":6704070,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6704911,"byte_end":6704918,"line_start":64,"line_end":64,"column_start":19,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6705171,"byte_end":6705178,"line_start":73,"line_end":73,"column_start":22,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/lock.rs","byte_start":6705541,"byte_end":6705548,"line_start":84,"line_end":84,"column_start":18,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":12},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751488,"byte_end":6751493,"line_start":79,"line_end":79,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751531,"byte_end":6751536,"line_start":80,"line_end":80,"column_start":31,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751553,"byte_end":6751557,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6751753,"byte_end":6751758,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":317},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/queue.rs","byte_start":6754660,"byte_end":6754665,"line_start":167,"line_end":167,"column_start":18,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":317},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711067,"byte_end":6711087,"line_start":118,"line_end":118,"column_start":19,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":1891}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711112,"byte_end":6711130,"line_start":119,"line_end":119,"column_start":19,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":1891}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711557,"byte_end":6711561,"line_start":133,"line_end":133,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1852},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711564,"byte_end":6711568,"line_start":133,"line_end":133,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1864},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711571,"byte_end":6711576,"line_start":133,"line_end":133,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":1562},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6711601,"byte_end":6711616,"line_start":134,"line_end":134,"column_start":22,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":345},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712140,"byte_end":6712157,"line_start":153,"line_end":153,"column_start":19,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":358},"to":{"krate":2,"index":1891}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712700,"byte_end":6712709,"line_start":179,"line_end":179,"column_start":23,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":364},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6712989,"byte_end":6712998,"line_start":189,"line_end":189,"column_start":28,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":364},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713008,"byte_end":6713017,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713501,"byte_end":6713513,"line_start":209,"line_end":209,"column_start":24,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6713720,"byte_end":6713732,"line_start":217,"line_end":217,"column_start":26,"column_end":38},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714034,"byte_end":6714046,"line_start":227,"line_end":227,"column_start":47,"column_end":59},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714062,"byte_end":6714074,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714670,"byte_end":6714682,"line_start":251,"line_end":251,"column_start":21,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6714839,"byte_end":6714851,"line_start":258,"line_end":258,"column_start":23,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6715000,"byte_end":6715012,"line_start":264,"line_end":264,"column_start":28,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":92},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6717108,"byte_end":6717118,"line_start":335,"line_end":335,"column_start":6,"column_end":16},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6719793,"byte_end":6719813,"line_start":426,"line_end":426,"column_start":9,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":324},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6722494,"byte_end":6722512,"line_start":507,"line_end":507,"column_start":9,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6729574,"byte_end":6729580,"line_start":709,"line_end":709,"column_start":9,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6732259,"byte_end":6732274,"line_start":791,"line_end":791,"column_start":9,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734847,"byte_end":6734853,"line_start":872,"line_end":872,"column_start":19,"column_end":25},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":338},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6734952,"byte_end":6734967,"line_start":878,"line_end":878,"column_start":19,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":345},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6735084,"byte_end":6735104,"line_start":884,"line_end":884,"column_start":19,"column_end":39},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6736180,"byte_end":6736198,"line_start":915,"line_end":915,"column_start":19,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":1562}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737412,"byte_end":6737432,"line_start":948,"line_end":948,"column_start":18,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":324},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737677,"byte_end":6737695,"line_start":959,"line_end":959,"column_start":18,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6737974,"byte_end":6737982,"line_start":976,"line_end":976,"column_start":9,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6741475,"byte_end":6741483,"line_start":1065,"line_end":1065,"column_start":19,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":352},"to":{"krate":2,"index":1891}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6741515,"byte_end":6741523,"line_start":1067,"line_end":1067,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":352},"to":{"krate":15,"index":82}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6741624,"byte_end":6741632,"line_start":1073,"line_end":1073,"column_start":20,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":352},"to":{"krate":15,"index":68}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742512,"byte_end":6742520,"line_start":1100,"line_end":1100,"column_start":18,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":352},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6742792,"byte_end":6742809,"line_start":1112,"line_end":1112,"column_start":9,"column_end":26},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":358},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6745506,"byte_end":6745523,"line_start":1181,"line_end":1181,"column_start":25,"column_end":42},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":358},"to":{"krate":15,"index":82}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6745624,"byte_end":6745641,"line_start":1187,"line_end":1187,"column_start":20,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":358},"to":{"krate":15,"index":68}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6746517,"byte_end":6746534,"line_start":1214,"line_end":1214,"column_start":18,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":358},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6746846,"byte_end":6746860,"line_start":1232,"line_end":1232,"column_start":9,"column_end":23},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747143,"byte_end":6747155,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747681,"byte_end":6747695,"line_start":1262,"line_end":1262,"column_start":31,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747732,"byte_end":6747746,"line_start":1263,"line_end":1263,"column_start":31,"column_end":45},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":410},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747784,"byte_end":6747796,"line_start":1265,"line_end":1265,"column_start":31,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":419},"to":{"krate":2,"index":1852}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/mpsc/mod.rs","byte_start":6747833,"byte_end":6747845,"line_start":1266,"line_end":1266,"column_start":31,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":419},"to":{"krate":2,"index":1864}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755797,"byte_end":6755805,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":1891}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6755830,"byte_end":6755836,"line_start":32,"line_end":32,"column_start":19,"column_end":25},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":449},"to":{"krate":2,"index":1891}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6758802,"byte_end":6758807,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6767334,"byte_end":6767340,"line_start":330,"line_end":330,"column_start":9,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769069,"byte_end":6769075,"line_start":372,"line_end":372,"column_start":18,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":449},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769340,"byte_end":6769348,"line_start":383,"line_end":383,"column_start":23,"column_end":31},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769512,"byte_end":6769520,"line_start":390,"line_end":390,"column_start":28,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":464},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6769533,"byte_end":6769541,"line_start":392,"line_end":392,"column_start":9,"column_end":17},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770470,"byte_end":6770478,"line_start":417,"line_end":417,"column_start":20,"column_end":28},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":7916}},{"span":{"file_name":"/home/nerun/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-channel-0.3.4/src/oneshot.rs","byte_start":6770688,"byte_end":6770696,"line_start":428,"line_end":428,"column_start":18,"column_end":26},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":443},"to":{"krate":2,"index":2045}}]}